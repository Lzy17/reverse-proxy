#!/bin/bash
start_dir="~"
runtime="00:30:00"
allocation=""

# Entry point for starting a notebook. Handles slurm processes and retrives url from slurm output
function start_notebook () {
    echo "Start Dir: $start_dir"
    echo "Time: $runtime"
    echo "Allocation: $allocation"
    
    # get the Reversse proxy API_TOKEN
    api_token_response=$(curl -s https://manage.comet-user-content.sdsc.edu/getlink.cgi)
    api_token=${api_token_response#*"Your token is "} #strip the token out of response
    api_token=$(echo "$api_token" | tr '\n' ' ') # removes the newline char
    api_token=$(echo "$api_token" | xargs) # remove extra spaces before or after

    if [[ $api_token_response == Oops!* ]]
    then
        echo $api_token_response
        exit 1
    fi
        
    mkdir -m 600 -p ~/.jupyter_secure
    tmpfile=`mktemp -p ~/.jupyter_secure` || exit 1

    # Make a random ssl token
    jupyter_token=$(openssl rand -hex 16)

    # Create the temp config file
    touch "$tmpfile".py
    echo "c.NotebookApp.token = '$jupyter_token'" | cat >> "$tmpfile".py
    echo "c.NotebookApp.notebook_dir = '$1'" | cat >> "$tmpfile".py
    echo "c.NotebookApp.allow_origin = '*'" | cat >> "$tmpfile".py
    echo "c.NotebookApp.allow_remote_access = True" | cat >> "$tmpfile".py

    # Give the user the start of their url
    echo -e Your notebook is here:"\n" https://"$api_token".comet-user-content.sdsc.edu?token="$jupyter_token"
    
    # start the batch script with the api token and the starting directory
    # Argument 1 is the RP api token
    # Argument 2 is the starting directory
    # Argument 3 is the tmpfile path
    if [ "$runtime" = "" ]; then
        echo "No time allotment given." 
    fi
    if [ "$allocation" = "" ]; then
        sbatch -t $runtime batch_notebook.sh $api_token $start_dir $tmpfile
    else
        sbatch -t $runtime -A $allocation batch_notebook.sh $api_token $start_dir $tmpfile
    fi
}

# Arg 1 is the time to parse
# any other args are invalid and will be ignored
parse_time() {
    IFS=':' read -ra TIME <<< "$1"
    IFS=' '
    if [ ${#TIME[*]} -ne 3 ]
    then
        if [ ${#TIME[*]} = 1 ]
        then
            if [ ${TIME[0]} -ge 60 ]
            then
                # then divide it up into hours, minutes, etc
                hrs=$(( ${TIME[0]}/60 ))
                min=$(( ${TIME[0]}%60 ))
                echo "$hrs:$min:00"
                return 0
            elif [ ${TIME} -le 0 ]
            then
                echo "Error: Negative Time Invalid"
                exit 1
            else
                echo "00:${TIME[0]}:00"
                return 0
            fi
        else
            echo "Error: Invalid time format"
            exit 1
        fi
    else
        echo $1
        return 1
    fi
}

usage() { 
    echo "Usage: $0 [-d <string>] [-A <string>] [time]" 1>&2; 
    echo Default Dir: ~
    echo Default Allocation is your sbatch default allocation
    echo Default Time is 30 mins
}

OPTIND=1
while getopts "h?:d:A:" opt; do
    case "$opt" in
        h|\?)
            usage 
            exit 0
            ;;
        d)  start_dir=$OPTARG 
            ;;
        A)  allocation=$OPTARG
            ;;
        *)  echo "Error: invalid optional argument $OPTARG" 
            usage 
            exit 1
            ;;
    esac
done

# check for positional argument
if [ $(( $# - $OPTIND )) -ge 0 ]; then
    runtime=$(parse_time ${@:$OPTIND:1})
fi


start_notebook $start_dir $runtime $allocation
